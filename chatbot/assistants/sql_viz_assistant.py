from langchain.vectorstores import VectorStore
from langchain_core.language_models.chat_models import BaseChatModel
from langgraph.checkpoint.postgres import PostgresSaver

from chatbot.agents import RouterAgent, VizAgent
from chatbot.agents.sql_agent import (PromptFormatter, SQLAgent,
                                      default_prompt_formatter)
from chatbot.contexts import ContextProvider

from .formatting import format_router_agent_response
from .messages import SQLVizAssistantMessage


class SQLVizAssistant:
    """LLM-powered assistant for querying and visualizing databases.

    Args:
        model (BaseChatModel):
            A langchain `ChatModel` instance with tool-calling support.
        context_provider (ContextProvider):
            An implementation of the `ContextProvider` protocol. Supplies all metadata
            needed by the `SQLagent`. By supplying your own ContextProvider, you can plug
            in any metadata source (BigQuery, Postgres, hard-coded examples, etc.) without
            changing agent's orchestration logic.
        prompt_formatter (Callable[[list[SQLExample]], str], optional):
            A callable that takes a list of `SQLExample` instances and returns a single
            string to be used as the system prompt during SQL generation. If not empty, the
            examples list is used to build a few-shot system prompt. Supply your own function
            to change how examples are formatted or to use your own entire prompt structure.
        checkpointer (PostgresSaver | None, optional):
            A checkpointer that will be used for persisting per-thread state across
            assistant's runs. If set to `None`, the assistant will not retain memory
            of previous messages. Defaults to `None`.
        viz_vector_store (VectorStore | None, optional):
            A vector database containing examples for the `VizAgent` LLM calls.
            If set to `None`, no examples will be used. Defaults to `None`.
        question_limit (int | None, optional):
            Maximum number of Q&A turns to retain in the conversation history
            sent to the model. If set to `None`, the context is unlimited. Defaults to `None`.

    Raises:
        TypeError: If the provided checkpointer or vector stores are of the wrong type.
    """

    def __init__(
        self,
        model: BaseChatModel,
        context_provider: ContextProvider,
        prompt_formatter: PromptFormatter = default_prompt_formatter,
        checkpointer: PostgresSaver | None = None,
        viz_vector_store: VectorStore | None = None,
        question_limit: int | None = 5,
    ):
        if checkpointer is None:
            subgraph_checkpointer = None
        elif isinstance(checkpointer, PostgresSaver):
            subgraph_checkpointer = True
        else:
            raise TypeError(
                "`checkpointer` must be an instance of langgraph `PostgresSaver` "
                f"or `None`, but got `{type(checkpointer)}`."
            )

        sql_agent = SQLAgent(
            model=model,
            context_provider=context_provider,
            prompt_formatter=prompt_formatter,
            checkpointer=subgraph_checkpointer,
            question_limit=question_limit
        )

        viz_agent = VizAgent(
            model=model,
            checkpointer=subgraph_checkpointer,
            vector_store=viz_vector_store,
            question_limit=question_limit
        )

        self.router_agent = RouterAgent(
            model=model,
            sql_agent=sql_agent,
            viz_agent=viz_agent,
            checkpointer=checkpointer,
            question_limit=question_limit
        )

    def invoke(self, message: str, config: dict|None=None) -> SQLVizAssistantMessage:
        """Sends a message to the `RouterAgent` and returns its response.

        Args:
            message (str): The input message.
            config (dict | None, optional): Optional configuration for the agent execution.
                Refer to https://python.langchain.com/docs/concepts/runnables/#runnableconfig
                for a list of allowed properties.

        Returns:
            SQLVizAssistantMessage: The structured response generated by the assistant.
        """
        response = self.router_agent.invoke(message, config)
        response = format_router_agent_response(response)

        if config is not None and "run_id" in config:
            response["id"] = config["run_id"]

        return SQLVizAssistantMessage(**response)

    def clear_thread(self, thread_id: str):
        """Deletes all checkpoints for a given thread.

        Args:
            thread_id (str): The thread unique identifier.
        """
        self.router_agent.clear_thread(thread_id)
