from langchain_core.language_models.chat_models import BaseChatModel
from langgraph.checkpoint.postgres import PostgresSaver

from chatbot.agents import SQLAgent
from chatbot.contexts import BaseContextProvider
from chatbot.formatters import SQLPromptFormatter

from .formatting import format_sql_agent_response
from .messages import SQLAssistantMessage


class SQLAssistant:
    """LLM-powered assistant for querying databases.

    Args:
        model (BaseChatModel):
            A langchain `ChatModel` instance with tool-calling support.
        context_provider (BaseContextProvider):
            A context provider that supplies all metadata needed by the agent. Implement
            this abstract base to plug in any data source (BigQuery, Postgres, etc.)
            without changing the agent's orchestration logic.
        prompt_formatter (SQLPromptFormatter):
            A formatter responsible for constructing the LLM system prompt during SQL generation step,
            based on the user's question and optional few-shot examples. Must implement how examples
            are retrieved and how the prompt template is composed.
        checkpointer (PostgresSaver | None, optional):
            A checkpointer that will be used for persisting per-thread state across
            assistant's runs. If set to `None`, the assistant will not retain memory
            of previous messages. Defaults to `None`.
        question_limit (int | None, optional):
            Maximum number of Q&A turns to retain in the conversation history
            sent to the model. If set to `None`, the context is unlimited. Defaults to `None`.

    Raises:
        TypeError: If the provided checkpointer or vector store are of the wrong type.
    """

    def __init__(
        self,
        model: BaseChatModel,
        context_provider: BaseContextProvider,
        prompt_formatter: SQLPromptFormatter,
        checkpointer: PostgresSaver | None = None,
        question_limit: int | None = 5,
    ):
        if checkpointer is not None and not isinstance(checkpointer, PostgresSaver):
            raise TypeError(
                "`checkpointer` must be an instance of langgraph `PostgresSaver` "
                f"or `None`, but got `{type(checkpointer)}`."
            )

        self.sql_agent = SQLAgent(
            model=model,
            context_provider=context_provider,
            prompt_formatter=prompt_formatter,
            checkpointer=checkpointer,
            question_limit=question_limit
        )

    def invoke(self, message: str, config: dict|None=None, rewrite_query: bool=False) -> SQLAssistantMessage:
        """Sends a message to the `SQLAgent` and returns its response.

        Args:
            message (str): The input message.
            config (dict | None, optional): Optional configuration for the agent execution.
                Refer to https://python.langchain.com/docs/concepts/runnables/#runnableconfig
                for a list of allowed properties. Defaults to `None`.
            rewrite_query (bool | None, optional): Whether to rewrite the input message
                for semantic search when calling the `SQLAgent`. Defaults to `False`.

        Returns:
            SQLAssistantMessage: The structured response generated by the assistant.
        """
        response = self.sql_agent.invoke(message, config, rewrite_query)
        response = format_sql_agent_response(response)

        if config is not None and "run_id" in config:
            response["id"] = config["run_id"]

        return SQLAssistantMessage(**response)

    def clear_thread(self, thread_id: str):
        """Deletes all checkpoints for a given thread.

        Args:
            thread_id (str): The thread unique identifier.
        """
        self.sql_agent.clear_thread(thread_id)
