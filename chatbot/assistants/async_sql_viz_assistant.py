from typing import AsyncIterator

from langchain_core.language_models.chat_models import BaseChatModel
from langgraph.checkpoint.postgres.aio import AsyncPostgresSaver

from chatbot.agents import RouterAgent, SQLAgent, VizAgent
from chatbot.contexts import BaseContextProvider
from chatbot.formatters import SQLPromptFormatter, VizPromptFormatter

from .formatting import format_router_agent_response
from .messages import SQLVizAssistantMessage


class AsyncSQLVizAssistant:
    """Async LLM-powered assistant for querying and visualizing databases.

    Args:
        model (BaseChatModel):
            A langchain `BaseChatModel` instance with tool-calling support.
        context_provider (BaseContextProvider):
            A context provider that supplies all metadata needed by the agent. Implement
            this abstract base to plug in any data source (BigQuery, Postgres, etc.)
            without changing the agent's orchestration logic.
        sql_prompt_formatter (SQLPromptFormatter):
            A formatter responsible for constructing the LLM system prompt during SQL generation step,
            based on the user's question and optional few-shot examples. Must implement how examples
            are retrieved and how the prompt template is composed.
        viz_prompt_formatter (VizPromptFormatter):
            A formatter responsible for constructing the LLM system prompt during data preprocessing
            step, based on the user's question and optional few-shot examples. Must implement how
            examples are retrieved and how the prompt template is composed.
        checkpointer (AsyncPostgresSaver | None, optional):
            A checkpointer that will be used for persisting per-thread state across
            assistant's runs. If set to `None`, the assistant will not retain memory
            of previous messages. Defaults to `None`.
        question_limit (int | None, optional):
            Maximum number of Q&A turns to retain in the conversation history
            sent to the model. If set to `None`, the context is unlimited. Defaults to `None`.

    Raises:
        TypeError: If the provided checkpointer or vector stores are of the wrong type.
    """

    def __init__(
        self,
        model: BaseChatModel,
        context_provider: BaseContextProvider,
        sql_prompt_formatter: SQLPromptFormatter,
        viz_prompt_formatter: VizPromptFormatter,
        checkpointer: AsyncPostgresSaver | None = None,
        question_limit: int | None = 5,
    ):
        if checkpointer is None:
            subgraph_checkpointer = None
        elif isinstance(checkpointer, AsyncPostgresSaver):
            subgraph_checkpointer = True
        else:
            raise TypeError(
                "`checkpointer` must be an instance of langgraph `PostgresSaver` "
                f"or `None`, but got `{type(checkpointer)}`."
            )

        sql_agent = SQLAgent(
            model=model,
            context_provider=context_provider,
            prompt_formatter=sql_prompt_formatter,
            checkpointer=subgraph_checkpointer,
            question_limit=question_limit
        )

        viz_agent = VizAgent(
            model=model,
            prompt_formatter=viz_prompt_formatter,
            checkpointer=subgraph_checkpointer,
            question_limit=question_limit
        )

        self.router_agent = RouterAgent(
            model=model,
            sql_agent=sql_agent,
            viz_agent=viz_agent,
            checkpointer=checkpointer,
            question_limit=question_limit
        )

    async def invoke(self, message: str, config: dict|None=None, rewrite_query: bool=False) -> SQLVizAssistantMessage:
        """Asynchronously sends a message to the `RouterAgent` and returns its response.

        Args:
            message (str): The input message.
            config (dict | None, optional): Optional configuration for the agent execution.
                Refer to https://python.langchain.com/docs/concepts/runnables/#runnableconfig
                for a list of allowed properties. Defaults to `None`.
            rewrite_query (bool | None, optional): Whether to rewrite the input message
                for semantic search when calling the `SQLAgent`. Defaults to `False`.

        Returns:
            SQLVizAssistantMessage: The structured response generated by the assistant.
        """
        response = await self.router_agent.ainvoke(message, config, rewrite_query)
        response = format_router_agent_response(response)

        if config is not None and "run_id" in config:
            response["id"] = config["run_id"]

        return SQLVizAssistantMessage(**response)

    async def stream(
        self,
        message: str,
        config: dict|None=None,
        stream_mode: list[str]|None=None,
        subgraphs: bool=False,
        rewrite_query: bool=False
    ) -> AsyncIterator[dict|tuple]:
        """Asynchronously streams graph steps.

        Args:
            message (str): The input message.
            config (RunnableConfig | None, optional): Optional configuration for the agent execution.
                Refer to https://python.langchain.com/docs/concepts/runnables/#runnableconfig
                for a list of allowed properties. Defaults to `None`.
            stream_mode (list[str] | None, optional): The mode to stream output. See the LangGraph streaming guide in
                https://langchain-ai.github.io/langgraph/how-tos/streaming for more details. Defaults to `None`.
            subgraphs (bool, optional): Whether to stream events from inside subgraphs. Defaults to `False`.
            rewrite_query (bool | None, optional): Whether to rewrite the input message
                for semantic search when calling the `SQLAgent`. Defaults to `False`.

        Yields:
            dict|tuple: The output for each step in the `RouterAgent`.
                Its type, shape and content depends on the `stream_mode` and `subgraphs` args.
        """
        async for chunk in self.router_agent.astream(
            message, stream_mode, subgraphs, config, rewrite_query
        ):
            yield chunk

    async def clear_thread(self, thread_id: str):
        """Asynchronously deletes all checkpoints for a given thread.

        Args:
            thread_id (str): The thread unique identifier.
        """
        await self.router_agent.aclear_thread(thread_id)
